---
title: "Week Five Blog"
author: "Gavin Fisher"
date: "2023-06-15"
categories: ["Week Five", "AI Models", "Python"]
---

## Created Skeleton code for the AI Models algorithm

First a model was made following the graphic from last week, the only added characteristics include a variable to hold the best image once it is selected, a variable to track if an image was randomly chosen by the algorithm, and that the program exits if no good picture is available. Otherwise the algorithm's skeleton is made as planned reading in images from a folder, a spot to add models that evaluate image quality, spots to evaluate characteristics, then finally a section to write to a csv file. Minimal code was added to the skeleton at the beginning of the week.

![](eval_skel1.png "First Eval Pic")

![](eval_skel2.png "Second Eval Pic")

![](eval_skel3.png "Third Eval Pic")


After the initial Skeleton code was made the first vegetation model was used to demonstrate how we would read in the models that we create then push images through the model to get a prediction of the output.

![](eval_skel4.png "Fourth Eval Pic")

Next using the original vegetation model as an example our team was able to create five additional models in Google Colab, house present model, clear image model, multiple houses model, vegetation model (new), and the siding model. I was responsible for the new vegetation model and siding model. The gutter model will be added later once images of damaged gutters are obtained. Images downloaded from the Google API had to be sorted into 2-3 categories for each model in order to train. Sorting is definitely in the crappies category due to it taking hours with a lack of poor images resulting. We will need to find a more efficient way to sort images for model training than moving images into folders.

![](sorting_pics.png "google collab")

Most of the models were very inaccurate due to the lack of data on poor house images. For example, for the siding model there were plenty of images of good siding, less images with chipped paint, and very few images with broken siding panels. The new model also shows the sample images in a more comprehensible way by showing the label names rather than just a binary label.

![](image_sample.png "images sample")

Finally after making the initial models they were added to the house_evaluator python script. Currently, the program prints the values returned by the models to a test CSV. Once more training images are obtained to improve the models accuracy the python script will print the results to the address of the images provided in the houses_databases CSV files. 
This image shows how the models with more than one label can return multiple options.

![](eval_skel5.png "Fifth Eval Pic")
